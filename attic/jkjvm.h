#include <stdio.h>struct jkjvm_string_t;struct jkjvm_attribute_t;typedef char CHAR;typedef signed char INT8;typedef short SHORT, INT16;typedef int   INT,  INT32;typedef long  LONG, LONG32;typedef unsigned char UCHAR, BYTE, UINT8;typedef unsigned short USHORT, WCHAR, UINT16;typedef unsigned int UINT, UINT32;typedef unsigned long ULONG, ULONG32, DWORD;#if 0typedef          __int64  INT64, LONG64, LONGLONG;typedef unsigned __int64  UINT64, ULONG64, ULONGLONG;#endif#if defined(_WIN64)typedef          __int64  INT_PTR,  LONG_PTR, SSIZE_T, PTRDIFF_T;typedef unsigned __int64 UINT_PTR, ULONG_PTR,  SIZE_T, DWORD_PTR;#elsetypedef DWORD DWORD_PTR;typedef INT INT_PTR, SSIZE_T, PTRDIFF_T;typedef LONG LONG_PTR;typedef UINT UINT_PTR, SIZE_T;typedef ULONG ULONG_PTR;#endiftypedef unsigned char  uchar_t;typedef unsigned short ushort_t;typedef unsigned int   uint_t;typedef unsigned long  ulong_t;typedef          int   int_t;typedef          long  long_t;typedef float float_t;typedef double double_t;typedef unsigned long jksize_t;typedef uchar_t  jkbyte_t;typedef ushort_t jkwchar_t;typedef ushort_t jchar_t;typedef long_t   jint_t;typedef float_t  jfloat_t;typedef double_t jdouble_t;typedef unsigned char u1_t[1];typedef unsigned char u2_t[2];typedef unsigned char u4_t[4];void jk_unused(void * p);typedef struct jk_allocator_t {	const struct jk_allocator_functions_t * functions;} jk_allocator_t;typedef struct jk_allocator_functions_t {	long (*allocate)(jk_allocator_t *, void **, jksize_t);	long   (*free)(jk_allocator_t *, void **);	long (*realloc)(jk_allocator_t *, void **, jksize_t);} jk_allocator_functions_t;typedef struct jk_buffer_t {	const struct jk_buffer_functions_t * functions;	jksize_t         size;	jksize_t         allocated_size;	void *           p;	jk_allocator_t * allocator;} jk_buffer_t;typedef struct jk_buffer_functions_t {	long    (*getsize)(jk_buffer_t *, jksize_t *);	long    (*setsize)(jk_buffer_t *, jksize_t, jkbyte_t** /* optional */);	long (*ensuresize)(jk_buffer_t *, jksize_t, jkbyte_t** /* optional */);	long        (*get)(jk_buffer_t *, jkbyte_t **);} jk_buffer_functions_t;long jk_malloc_allocator_allocate(jk_allocator_t * self, void ** pp, jksize_t n);long jk_malloc_allocator_free(jk_allocator_t * self, void ** pp);long jk_malloc_allocator_realloc(jk_allocator_t * self, void ** pp, jksize_t n);long jk_buffer_getsize(jk_buffer_t * self, jksize_t * pn);long jk_buffer_get(jk_buffer_t * self, void ** pp);long jk_buffer_ensuresize(jk_buffer_t * self, jksize_t size, jkbyte_t ** pp);long jk_buffer_setsize(jk_buffer_t * self, jksize_t size, jkbyte_t ** pp);typedef struct jlong_t {	long_t 		hi;	ulong_t		lo;} jlong_t;typedef struct jkjvm_unresolved_constant_t {	u1_t tag;} jkjvm_unresolved_constant_t;typedef struct jkjvm_unresolved_constant_class_t {	u1_t tag;	u2_t name_index;} jkjvm_unresolved_constant_class_t;typedef struct jkjvm_unresolved_constant_fieldref_t {	u1_t tag;	u2_t class_index;	u2_t name_and_type_index;} jkjvm_unresolved_constant_fieldref_t;typedef jkjvm_unresolved_constant_fieldref_t jkjvm_unresolved_constant_methodref_t;typedef jkjvm_unresolved_constant_fieldref_t jkjvm_unresolved_constant_interfacemethodref_t;typedef struct jkjvm_unresolved_constant_string_t {	u1_t tag;	u2_t string_index;} jkjvm_unresolved_constant_string_t;typedef struct jkjvm_unresolved_constant_integer_t {	u1_t tag;	u4_t data;} jkjvm_unresolved_constant_integer_t;typedef struct jkjvm_unresolved_constant_float_t {	u1_t tag;	u4_t data;} jkjvm_unresolved_constant_float_t;typedef struct jkjvm_unresolved_constant_long_t {	u1_t tag;	u4_t high_bytes;	u4_t low_bytes;} jkjvm_unresolved_constant_long_t;typedef struct jkjvm_unresolved_constant_double_t {	u1_t tag;	u4_t high_bytes;	u4_t low_bytes;} jkjvm_unresolved_constant_double_t;typedef struct jkjvm_unresolved_constant_name_and_type_t {	u1_t tag;	u2_t  name_index;	u2_t descriptor_index;} jkjvm_unresolved_constant_name_and_type_t;typedef struct jkjvm_unresolved_constant_utf8_t {	u1_t tag;	u2_t length;} jkjvm_unresolved_constant_utf8_t;typedef struct jkjvm_object_data_t {	int pad;} jkjvm_object_data_t;typedef struct jkjvm_attribute_t {	unsigned name_index;	unsigned long length;	jkbyte_t * data;} jkjvm_attribtute_t;typedef struct jkjvm_infobase_t {	unsigned access_flags;	unsigned name_index;	unsigned descriptor_index;	unsigned attributes_count;	struct jkjvm_attribute_t * attributes;	struct jkjvm_string_t * name;	struct jkjvm_string_t * descriptor;} jkjvm_infobase_t;typedef struct jkjvm_fieldinfo_t {	jkjvm_infobase_t base;} jkjvm_fieldinfo_t;typedef struct jkjvm_methodinfo_t {	jkjvm_infobase_t base;} jkjvm_methodinfo_t;typedef struct jkjvm_resolved_constant_t {	int pad;} jkjvm_resolved_constant_t;typedef struct jkjvm_constantpool_t {	jk_buffer_t raw_bytes;	ushort_t * offsets;	jkjvm_resolved_constant_t ** resolved;	uint_t     count;	uint_t     count_of_raw_bytes_read;	uint_t     underestimated_total_number_of_raw_bytes;} jkjvm_constantpool_t;typedef struct jkjvm_class_t {	FILE *  file;	ulong_t magic;	uint_t  minor_version;	uint_t  major_version;	jkjvm_constantpool_t constantpool;} jkjvm_class_t;typedef struct jkjvm_minimum_sized_classfile_t {	u4_t magic;	u2_t minor_version;	u2_t major_version;	u2_t constantpool;	/* constant pool */	u2_t access_flags;	u2_t this_class;	u2_t super_class;	u2_t interfaces_count;	/* interfaces */	u2_t fields_count;	/* fields */	u2_t methods_count;	/* methods */	u2_t attributes_count;	/* attributes */} jkjvm_minimum_sized_classfile_t;long jkjvm_classfile_read_constantpool(jkjvm_class_t * cl);typedef union jkjvm_any_t {	char c;	unsigned char uc;	signed char sc;	short s;	unsigned short us;	int i;	unsigned int ui;	long l;	unsigned long ul;	float f;	double d;	void * vp;	jkwchar_t wc;	jlong_t jl;} jkjvm_any_t;typedef struct jkjvm_object_typeinfo_t {	int pad;} jkjvm_object_typeinfo_t;typedef struct jkjvm_object_t {	jkjvm_object_typeinfo_t * typeinfo;	jkjvm_object_data_t     * data;} jkjvm_object_t;typedef struct jkjvm_string_data_t {	jkjvm_object_data_t object;} jkjvm_string_data_t;typedef struct jkjvm_string_typeinfo_t {	int pad;} jkjvm_string_typeinfo_t;typedef struct jkjvm_string_t {	jkjvm_string_typeinfo_t * typeinfo;	jkjvm_string_data_t      * data;} jkjvm_string_t;typedef struct jkjvm_constant_info_t {	uchar_t number_of_constant_pool_entries_consumed;	uchar_t unresolved_size;	uchar_t resolved_size;} jkjvm_constant_info_t;#define jkjvm_constant_class_tag               7 #define jkjvm_constant_fieldref_tag            9#define jkjvm_constant_methodref_tag          10#define jkjvm_constant_interfacemethodref_tag 11#define jkjvm_constant_string_tag              8#define jkjvm_constant_integer_tag             3#define jkjvm_constant_float_tag               4#define jkjvm_constant_long_tag                5#define jkjvm_constant_double_tag              6#define jkjvm_constant_nameandtype_tag        12#define jkjvm_constant_utf8_tag                1
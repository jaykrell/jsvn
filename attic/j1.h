typedef unsigned char  uchar_t;typedef unsigned int   uint_t;typedef unsigned short ushort_t;typedef unsigned long  ulong_t;typedef unsigned short jchar_t;typedef union jk_java_word_t {	void *    void_pointer;	char *    char_pointer;	jchar_t * jchar_pointer;	ulong_t   ul;	ushort_t  us[2];	float     f;} jk_java_word_t;typedef struct jk_java_constant_memberref_t {	unsigned class_index;	unsigned name_and_type_index;} jk_java_constant_memberref_t;typedef jk_java_constant_memberref_t jk_java_constant_fieldref_t, jk_java_constant_methodref_t, jk_java_constant_interfacemethodref_t;typedef struct jk_java_constant_string_t {	unsigned string_index;} jk_java_constant_string_t;typedef struct jk_java_constant_integer_t {	unsigned long number;} jk_java_constant_integer_t;typedef struct jk_java_constant_float_t {	float number;} jk_java_constant_float_t;typedef union jk_java_constant_untagged_union_t {	jk_java_constant_memberref_t memberref;} jk_java_constant_untagged_union_t;#define jk_java_magic "\xca\xfe\xba\xbe"typedef struct jk_file_buffer_t {	char * buffer;	unsigned buffer_size;	unsigned bytes_in_buffer;	unsigned position;	unsigned read_ahead;	unsigned keep_all_bytes : 1;} jk_file_buffer_t;typedef struct jk_file_t {	void * stdio_file;	const char * file_path;	const char * openmode;	jk_file_buffer_t buffer;} jk_file_t;longjk_file_open_for_read(	jk_file_t * file,	const char * file_path	);	longjk_file_read_copy(	jk_file_t * f,	void * buffer,	unsigned bytes_to_read,	unsigned * bytes_read /* optional */	);longjk_file_read_get_buffer(	jk_file_t * f,	void ** buffer,	unsigned bytes_to_read,	unsigned * bytes_read /* optional */	);longjk_file_read_ahead(	jk_file_t * b,	unsigned bytes_to_read	);	longjk_file_close(	jk_file_t * f	);typedef struct jk_java_constant_pool_t {	uchar_t *   tags;	jk_java_word_t * words;} jk_java_constant_pool_t;typedef struct jk_java_classfile_t {	jk_file_t   file;	char		magic[4];	uint_t		minor_version;	uint_t		major_version;	uint_t		constant_pool_count;	uint_t		access_flags;	uint_t		this_class;	uint_t		super_class;	uint_t		interfaces_count;	uint_t		fields_count;	uint_t		methods_count;	uint_t		attributes_count;	jk_java_constant_pool_t constant_pool;} jk_java_classfile_t;typedef struct jk_java_packed_classfile1_t {	uchar_t	magic[4];	uchar_t	minor_version[2];	uchar_t	major_version[2];	uchar_t	constant_pool_count[2];	/* constant_pool */} jk_java_packed_classfile1_t;typedef struct jk_java_packed_classfile2_t {	uchar_t	access_flags[2];	uchar_t	this_class[2];	uchar_t	super_class[2];	uchar_t	interfaces_count[2];} jk_java_packed_classfile2_t;/*uchar_t interfaces[interface_count][2];uchar_t fields_count[2];jk_java_packed_field_info_t fields[fields_count];uchar_t methods_count[2];jk_java_packed_method_info_t methods[methods_count];uchar_t attributes_count[2];jk_java_packed_attribute_info_t attributes[attributes_count];*/#define jk_java_constant_class_tag			7#define jk_java_constant_fieldref_tag		9#define jk_java_constant_methodref_tag		10#define jk_java_constant_interfacemethodref_tag 11#define jk_java_constant_string_tag			8#define jk_java_constant_integer_tag		3#define jk_java_constant_float_tag			4#define jk_java_constant_long_tag			5#define jk_java_constant_double_tag			6#define jk_java_constant_nameandtype_tag	12#define jk_java_constant_utf8_tag			1typedef struct jk_java_constant_class_t {	unsigned tag;	unsigned name_index;} jk_java_constant_class_t;#define jk_endian_big    0#define jk_endian_little 1typedef struct jk_pack_spec1_t {	unsigned packed_size     : 4;	unsigned unpacked_size   : 4;	unsigned packed_offset   : 7;	unsigned unpacked_offset : 7;	signed   is_signed       : 1;} jk_pack_spec1_t;typedef struct jk_pack_specn_t {	unsigned endian             : 2;	unsigned number_of_elements : 5;	const jk_pack_spec1_t * elements;	unsigned packed_size        : 6;	unsigned unpacked_size      : 6;} jk_pack_specn_t;#define jk_field_size(a,b)   ((unsigned)sizeof(((a*)0)->b))#define jk_field_offset(a,b) ((unsigned)&((a*)0)->b)#define jk_number_of(a)      ((unsigned)(sizeof(a)/sizeof((a)[0])))#define jk_make_pack_spec(packed, unpacked, field, endian) \	{ 	jk_field_size(packed, field), \		jk_field_size(unpacked, field), \		jk_field_offset(packed, field), \		jk_field_offset(unpacked, field) \	}	#define jk_offsetof(t,m) ((unsigned)(&((t*)0)->m))longjk_file_read_and_unpack(	jk_file_t * f,	jk_pack_specn_t * spec,	unsigned packed_buffer_size,	void * unpacked_buffer,	unsigned unpacked_buffer_size	);longjk_unpack(	unsigned endian,	const void * vpacked_buffer,	void * vunpacked_buffer,	const jk_pack_spec1_t * specs,	unsigned n	);#define jk_min(x,y) (((x) < (y)) ? (x) : (y))#define jk_max(x,y) (((x) < (y)) ? (y) : (x))extern const jk_pack_spec1_t jk_java_classfile_pack_specs1[];extern const jk_pack_spec1_t jk_java_classfile_pack_specs2[];extern jk_pack_specn_t jk_java_classfile_pack_spec1;voidjk_reverse_memory(	unsigned char * p,	unsigned count	);voidjk_copy_memory(	unsigned char * to,	const unsigned char * from,	unsigned count	);voidjk_copy_memory_reverse(	unsigned char * to,	const unsigned char * from,	unsigned count	);voidjk_zero_memory(	void * p,	unsigned n    );longjk_unpack(	unsigned endian,	const void * vpacked_buffer,	void * vunpacked_buffer,	const jk_pack_spec1_t * specs,	unsigned n	);longjk_compute_packed_or_unpacked_size(	jk_pack_specn_t * p,	unsigned packed_or_unpacked	);longjk_compute_packed_size(jk_pack_specn_t * p);longjk_compute_unpacked_size(jk_pack_specn_t * p);unsigned jk_align_integer(unsigned n);longjk_file_open_for_read(	jk_file_t * file,	const char * file_path	);longjk_file_close(	jk_file_t * file	);longjkp_file_read_direct(	jk_file_t * file,	void * buffer,	unsigned bytes_to_read,	unsigned * bytes_read	);longjk_file_read_and_unpack(	jk_file_t * file,	jk_pack_specn_t * spec,	unsigned packed_buffer_size,	void * unpacked_buffer,	unsigned unpacked_buffer_size	);typedef struct jk_dump_struct_t {	unsigned     number_of_fields;	const struct jk_dump_field_t * fields;} jk_dump_struct_t;typedef struct jk_dump_field_t {	unsigned offset;	const char * name;	const char * format;} jk_dump_field_t;longjk_dump_struct(	const char * prefix,	const void * vbase,	const jk_dump_struct_t * desc	);extern const jk_dump_field_t jk_dump_java_classfile_fields[];extern const jk_dump_struct_t jk_dump_java_classfile_struct;longjk_file_read_ahead(	jk_file_t * file,	unsigned n	);longjk_file_read_copy(	jk_file_t * file,	void * buffer,	unsigned bytes_to_read,	unsigned * bytes_read	);	longjk_file_read_get_buffer(	jk_file_t * file,	void ** out_buffer,	unsigned bytes_to_read,	unsigned * out_bytes_read	);unsignedjk_get_big_endian_u2(const unsigned char * a);unsigned longjk_get_big_endian_u4(const unsigned char * a);extern const float jk_java_positive_infinity_float;extern const float jk_java_negative_infinity_float;extern const double jk_java_positive_infinity_double;extern const double jk_java_negative_infinity_double;extern const float jk_java_nan_float;extern const double jk_java_nan_double;typedef struct jk_longlong_t{	signed long high;	unsigned long low;} jk_longlong_t;typedef struct jk_ulonglong_t{	unsigned long high;	unsigned long low;} jk_ulonglong_t;jk_ulonglong_tjk_longlong_to_ulonglong(jk_longlong_t a);jk_ulonglong_t*jk_longlong_to_ulonglong_pointer(jk_longlong_t * a);voidjk_long_add_with_carry_in(long * a, long b, long c, unsigned carry);voidjk_long_add_with_carry_out(long * a, long b, long c, unsigned * carry);voidjk_long_add_with_carry_in_and_out(long * a, long b, long c, unsigned * carry);voidjk_ulong_add_with_carry_in(unsigned long * a, unsigned long b, unsigned long c, unsigned carry);voidjk_ulong_add_with_carry_out(unsigned long * a, unsigned long b, unsigned long c, unsigned * carry);voidjk_ulong_add_with_carry_in_and_out(unsigned long * a, unsigned long b, unsigned long c, unsigned * carry);voidjk_longlong_add(jk_longlong_t * a, jk_longlong_t b, jk_longlong_t c);voidjk_ulonglong_add(jk_ulonglong_t * a, jk_ulonglong_t b, jk_ulonglong_t c);voidjk_longlong_from_long(jk_longlong_t * a, long b);voidjk_longlong_from_ulong(jk_longlong_t * a, unsigned long b);voidjk_ulonglong_bitwise_and(jk_ulonglong_t * a, jk_ulonglong_t b, jk_ulonglong_t c);voidjk_ulonglong_bitwise_or(jk_ulonglong_t * a, jk_ulonglong_t b, jk_ulonglong_t c);voidjk_longlong_bitwise_and(jk_longlong_t * a, jk_longlong_t b, jk_longlong_t c);voidjk_longlong_bitwise_or(jk_longlong_t * a, jk_longlong_t b, jk_longlong_t c);unsignedjk_ulonglong_to_boolean(jk_ulonglong_t a);unsignedjk_longlong_to_boolean(jk_longlong_t a);unsignedjk_ulonglong_logical_and(jk_ulonglong_t a, jk_ulonglong_t b);unsignedjk_ulonglong_logical_or(jk_ulonglong_t a, jk_ulonglong_t b);unsignedjk_longlong_logical_and(jk_longlong_t a, jk_longlong_t b);unsignedjk_longlong_logical_or(jk_longlong_t a, jk_longlong_t b);voidjk_ulonglong_bitwise_not(jk_ulonglong_t * a, jk_ulonglong_t b);voidjk_longlong_bitwise_not(jk_longlong_t * a, jk_longlong_t b);unsignedjk_ulonglong_logical_not(jk_ulonglong_t a);unsignedjk_longlong_logical_not(jk_longlong_t a);voidjk_ulonglong_left_shift(jk_ulonglong_t * a, jk_ulonglong_t b, unsigned shift);voidjk_longlong_left_shift(jk_longlong_t * a, jk_longlong_t b, unsigned shift);voidjk_ulonglong_right_shift(jk_ulonglong_t * a, jk_ulonglong_t b, unsigned shift);voidjk_longlong_zero_fill_right_shift(jk_longlong_t * a, jk_longlong_t b, unsigned shift);longjk_long_zero_fill_right_shift(long a, unsigned shift);longjk_long_with_n_right_bits_clear(unsigned n);longjk_long_with_n_right_bits_set(unsigned n);longjk_long_with_n_left_bits_clear(unsigned n);longjk_long_with_n_left_bits_set(unsigned n);#define jk_bits_of(x) (sizeof(x)*8)longjk_long_sign_fill_right_shift(long a, unsigned shift);voidjk_longlong_sign_fill_right_shift(jk_longlong_t * a, jk_longlong_t b, unsigned shift);voidjk_ulong_multiply_to_ulonglong(jk_ulonglong_t * a, unsigned long b, unsigned long c);voidjk_long_multiply_to_longlong(jk_longlong_t * a, long b, long c);voidjk_ulonglong_multiply(jk_ulonglong_t * a, jk_ulonglong_t b, jk_ulonglong_t c);voidjk_longlong_multiply(jk_longlong_t * a, jk_longlong_t b, jk_longlong_t c);floatjk_java_convert_java_float_to_native_float(	unsigned char * bytes	);longjk_java_read_constantpool(	jk_java_classfile_t * classfile	);long jk_java_read_classfile(jk_java_classfile_t ** ppcf, const char * filepath);
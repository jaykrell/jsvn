#!/usr/bin/perluse IO::Handle;use FCntl;$newline = "\n";sub OpenBinaryFileReadOnlyOrError{	my($file_handle);	my($file_path) = ($_[0]);		$file_handle = IO::Handle->new();	sysopen($file_handle, $file_path, O_RDONLY | O_BINARY) || die('open ' . $file_path . ': ' . $!);		return $file_handle;}sub SeekTo{    my($file_handle, $offset) = ($_[0], $_[1]);    return seek($file_handle, $offset, 0);}sub SeekForward{    my($file_handle, $offset) = ($_[0], $_[1]);    return seek($file_handle, $offset, 1);}sub SeekBackward{    my($file_handle, $offset) = ($_[0], $_[1]);    return seek($file_handle, $offset, 2);}sub ReadFile{    my($file_handle, $buffer, $number_of_bytes_to_read) = ($_[0], $_[1], $_[2]);    my($result);    $result = read($file_handle, $$buffer, $number_of_bytes_to_read);    return $result;}sub GetFileSize{    my($file_handle) = ($_[0]);    return -s $file_handle;}sub NewHashRef { my(%x); return \%x; }sub ReadBlock{    my($file_handle) = ($_[0]);    my($buffer);	    ReadFile($file_handle, \$buffer, 512);		return $buffer;}sub UnpackApplePartitionMap{}sub UnpackAppleBlock0{# TYPE Block0 = # PACKED RECORD#	sbSig: 					Integer;				{device signature}#	sbBlkSize: 				Integer;				{block size of the device}#	sbBlkCount: 			LongInt;				{number of blocks on the device}#	sbDevType: 				Integer;				{reserved}#	sbDevId: 				Integer;				{reserved}#	sbData: 				LongInt;				{reserved}#	sbDrvrCount:			Integer;				{number of driver descriptor entries}#	ddBlock: 				LongInt; 				{first driverÕs starting block}#	ddSize: 				Integer; 				{size of the driver, in 512-byte blocks}#	ddType: 				Integer; 				{operating system type (MacOS = 1)}#	ddPad:					ARRAY [0..242] OF Integer; {additional drivers, if any}# END;## We do not read in the array of drivers.#    my($buffer) = ($_[0]);    my($skip);    (            $block0->{'signature'},        $block0->{'block_size'},        $block0->{'block_count'},		$skip,		$skip,		$skip,        $block0->{'driver_count'},        $block0->{'first_driver_start'},        $block0->{'first_driver_size'},        $block0->{'first_driver_type'}    ) = unpack('nnNnnNnNnn', $buffer);	return $block0;}sub ReadAppleBlock0{    my($file_handle) = ($_[0]);    my($block0);		$block0 = UnpackAppleBlock0(ReadBlock($file_handle));		Dump($block0);	return $block0}sub DumpArray{	my($array) = ($_[0]);	my($index);	my($element);			$index = 0;	for $element (@$array)	{		print('# [' . $index . '] = ' . $element . $newline);		$index += 1;	}}sub DumpIndent{	my($i) = ($_[0]);	while ($i >= 4)	{		print('                ');		$i -= 4;	}	while ($i >= 1)	{		print('    ');		$i -= 1;	}}sub DumpStartLine{	print('# ');	DumpIndent($_[0]);}sub DumpEndLine{	print($newline);}sub DumpHash{	my($indent) = ($_[0]);		my($hash) = ($_[1]);		my($key);		for $key (sort(keys(%$hash)))	{		DumpStartLine($indent);		Dump($indent + 1, $key);		print(' => ');		Dump($indent + 1, $hash->{$key});		DumpEndLine($indent);	}}sub Dump{	my($x) = ($_[0]);		if (ref($x) eq 'HASH')	{		DumpHash($x);	}	elsif (ref($x) eq 'ARRAY')	{		DumpArray($x);	}}sub Main{	my($file_path) = ($_[0]);	my($file_handle);	my($block0);		$file_handle = OpenBinaryFileReadOnlyOrError($file_path);	$block0 = ReadAppleBlock0($file_handle);}@array = (1,2);Dump(\@array);Main($ARGV[0]);
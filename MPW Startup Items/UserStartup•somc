##	MPW shell variable settings for SOM development.###	{SOMIncludes}	This variable is used by the SOM compiler, somc.#					Is specifies the folder(s) for the SOM .idl#					include header files.  To have more than one#					default directory, this variable may be expressed#					as a comma separated list.  Example:##		Set	SOMIncludes	":,{MPW}Interfaces:SOMIncludes:"#	If `Exists "{MPW}:Interfaces&Libraries:"` 		Set InterfacesandLibrariesLocation "{MPW}:Interfaces&Libraries:"	Else		Set InterfacesandLibrariesLocation "{MPW}"	EndSet		SOMIncludes		"{InterfacesandLibrariesLocation}Interfaces:SOMIncludes:"Export	SOMIncludes##	{SOMDefines}	This variable is used by the SOM compiler, somc.#					It specifies pre-defined macros for ifdef processing #					of Å.idl include files (not c/c++ files).#Set		SOMDefines		"-D __MAC__ -D __SOMIDL__"Export	SOMDefines##	{SOMOptions}	This variable is used by the SOM compiler, somc.#					It specifies -m modifier options used in generation#					of language specific header files during execution of somc.##					Note: set -mcpluscpp to generate .cpp files for c++ the xc emitter#						  set -mcplusc   to generate .C files for c++ the xc emitter#						  (default is .cp for c++ the xc emitter)#Set		SOMOptions		"-maddstar -mnoint -museinheritedmethods -mnomethodids -mcorbastring -mnoshortparents"Export	SOMOptions	# NOTE: -maddstar adds the explict *, unlike in the CORBA IDL lanaguage.  This is the way most C/C++	# progammer's would expect to read source code with object references.	# NOTE: -mnoint supresses warnings on the use of the integer data type (not supported by CORBA)	# NOTE: -museinheritedmethods signals that in the xih bindings file, the inherited bindings should	# be used instead of regenerating the bindings again at each class level.  This saves space in the	# output file.	# NOTE: the options -mnomethodids and -mnoshortparents are used to turn off options that	# increase the size and complexity of the generated header files, in particular, the ih/xih files.	# These features are basically compile time convienances that turn out to be seldom used.	# Specifically, -mnomethodids turns off generation of method ids for each newly introduced method.	# These global variables are not properly garbage collected by all development systems, thus	# resulting in wasted space in the binary image produced even when these globals are not used by 	# by the class implementation programmer.  Thus methodids are therefore not generated by default.	# The option -mnoshortparents suppresses generation of "guarded", (with lots of #ifdefs) but	# potentially ambiguous parent call thru macros.  The standard .c/.cp emitter does not use	# these ambiguous forms when creating the boilerplate implementation files, but rather uses	# fully qualified parent call thru macros.  Since use of the short names can be problematic	# they are turned off by default.
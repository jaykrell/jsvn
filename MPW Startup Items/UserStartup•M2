#	M2Startup - MPW Shell Modula-2 Startup File##	This file (M2StartUp) should be executed from the UserStartUp#	file, and sets of the variables required for the Modula-2 System#	The location of the Interface files (M2Interfaces), and the Libraries#	(M2Libraries) needs to be defined in here.  Also this file will add#	a menu which can be used for generated Modula-2 Statement Templates.#	The file should be located in the directory containing the MPW Shell.#	These defines are required:	If `Exists "{MPW}:Interfaces&Libraries:"` 		Set InterfacesandLibrariesLocation "{MPW}:Interfaces&Libraries:"	Else		Set InterfacesandLibrariesLocation "{MPW}"	End	#	{M2Libraries} - Directory that contains Modula-2 libraries.					Set M2Libraries "{InterfacesandLibrariesLocation}Libraries:M2Libraries:"			Export M2Libraries#	{M2Interfaces} - Parent directory for Modula-2 interfaces.			Set M2Interfaces "{InterfacesandLibrariesLocation}Interfaces:M2Interfaces:"			Export M2Interfaces#	{M2PPCSyms} - Directories to search for Modula-2 interface symbol files for PowerPC.#			Set M2PPCSyms "{M2Interfaces}M2PPCSyms:"#			Export M2PPCSyms#	{M268kSyms} - Directories to search for Modula-2 interface symbol files for 68k Mac.			Set M268kSyms "{M2Interfaces}M268kSyms:"			Export M268kSyms#	{M2Syms} - Default directories to search for Modula-2 interface symbol files.#			Set M2Syms "{M268kSyms}"#			Export M2Syms			Unset InterfacesandLibrariesLocation#	These defines are required for Modula menu:#	{M2UniversalDefs} - Directory with Modula-2 universal toolbox definition files.#			Set M2UniversalDefs "{M2Interfaces}M2UniversalDefs:"#			Export M2UniversalDefs#	{M2LibDefs} - Directory with Modula-2 library definition files.			Set M2LibDefs "{M2Interfaces}M2LibDefs:"			Export M2LibDefs#	These are some nice menu commands that you may modify to meet your#	own needs or delete if you do not like them.#	Menu commands for Statement Templates.Alias Cat Catenate#DeleteMenu M2#Modula-2 menu additions by R. SutcliffeAddMenu M2 '(Active Window<U<B' ''AddMenu M2 'Compile' ¶	'Begin; ¶		open {Worksheet}; ¶		set name `rootname "{target}"`;¶		If {ctype} != PPC; ¶			Modula2 {M2Options} "{target}" ¶¶ {Worksheet} -isa68k -sym {M268kSyms}; ¶		End; ¶		If {ctype} != 68K; ¶				Modula2 {M2Options} "{target}" ·· {Worksheet} ¶						-sym {M2PPCSyms} -isappc -noopt -check full;  ¶		end; ¶	End'AddMenu M2 'Make Link File' ¶	'Begin; ¶		open {Worksheet}; ¶		set name `rootname "{target}"`;¶		set makefile "{name}.make"; ¶		catenate "{MPW}P1M2:"M2.MakeDefaults > {makefile}; ¶		If {ctype} != PPC; ¶			echo "6F" > GenMake.dat; ¶			genmake {name} >> {makefile} ³³ {Worksheet}; ¶    end; ¶		echo "#-----------------------------------------" >> {makefile}; ¶		If {ctype} != 68K; ¶			echo "PF" > GenMake.dat; ¶			genmake {name} >> {makefile} ³³ {Worksheet}; ¶		end; ¶		Delete -y GenMake.dat; ¶		if "`Exists Debug.dat`"; ¶     else;  ¶       echo M`directory` > debug.dat; ¶       echo R`directory` >>  debug.dat; ¶    end; ¶	End'AddMenu M2 'Re-Link' ¶  'Begin; ¶		open {Worksheet}; ¶	  set name `rootname "{target}"`;¶		set exit 0;¶		delete "{name}" ³ Dev:Null; ¶		set exit 1;¶    if "`Exists "{name}.make" `"; ¶  		Make -f "{name}".make "{name}" > makeout ³³ {Worksheet}; ¶			execute "makeout" ³³ "{Worksheet}"; ¶			delete "makeout"; ¶			if "`Exists "{name}.r" `"; ¶				Rez -append -o {name} {name}.r; ¶			end; ¶			echo -n "{name}" >> "{Worksheet}"; ¶		else;¶		  echo "No makefile for the module {name} " >> "{Worksheet}"; ¶    end; ¶	End'AddMenu M2 '(-' ''AddMenu M2 '(File on Disk<U<B' ''AddMenu M2 'Compile¶' ¶	'Begin; ¶		open {Worksheet}; ¶		set path "`GetFileName  -m "Select Compile File" -b Compile -t TEXT`" ³³ {Worksheet}; ¶		set name `rootname "{path}"`;¶		If {ctype} != PPC; ¶		  Modula2 {M2Options}  {path} ³³ {Worksheet} -isa68k -sym {M268kSyms}; ¶	  End; ¶	  If {ctype} != 68K; ¶						Modula2 {M2Options} {path} ³³ {Worksheet} ¶						-isappc -check full -noopt ¶						-sym "{M2PPCSyms}" ; ¶		end; ¶	End'AddMenu M2 'Make Link File¶' ¶	'Begin; ¶		open {Worksheet}; ¶		set path "`GetFileName  -m "Select Source File" -b GenMake -t TEXT`" ³³ {Worksheet}; ¶		set name `rootname "{path}"`;¶		set makefile "{name}.make"; ¶		catenate "{MPW}P1M2:"M2.MakeDefaults > {makefile}; ¶		If {ctype} != PPC; ¶			echo "6F" > GenMake.dat; ¶			genmake {name} >> {makefile} ³³ Dev:Null; ¶    end; ¶		echo "#-----------------------------------------" >> {makefile}; ¶		If {ctype} != 68K; ¶			echo "PF" > GenMake.dat; ¶			genmake {name} >> {makefile} ³³ {Worksheet}; ¶		end; ¶		Delete -y GenMake.dat; ¶		if "`Exists Debug.dat`"; ¶     else;  ¶       echo M`directory` > debug.dat; ¶       echo R`directory` >>  debug.dat; ¶    end; ¶	End'AddMenu M2 'Re-Link¶' ¶   'Begin; ¶		open {Worksheet}; ¶		set path "`GetFileName  -m "Select File to Make" -b Make -t TEXT`" ³³ {Worksheet}; ¶		set name `rootname "{path}"`;¶	  set exit 0;¶		delete "{name}" ³ Dev:Null; ¶		set exit 1;¶    if "`Exists "{name}.make" `"; ¶  		Make -f "{name}".make "{name}" > makeout ³³ {Worksheet}; ¶			execute "makeout" ³³ "{Worksheet}"; ¶			delete "makeout"; ¶			if "`Exists "{name}.r" `"; ¶				Rez -append -o {name} {name}.r; ¶			end; ¶			echo -n "{name}">> "{Worksheet}"; ¶		else;¶		  echo "No makefile for the module {name} " >> "{Worksheet}"; ¶    end; ¶	End'AddMenu M2 '(-' ''set ctype PPCexport ctypeAddMenu M2 'FatMode' ¶'Begin; ¶	set ctype "`GetListItem -c 68K PPC Fat -s -d PPC -m FatMode`"; ¶ End'AddMenu M2 '(-' ''AddMenu M2 'IF/I' 'cut ¤ "{Active}";  ¶Find ¤:\¶n\Æ "{Active}"; Set T "`Cat "{Active}".¤`";Cut ¤ "{Active}";	¶echo -n "{T}IF (*.Expression.*)¶n{T}THEN¶n{T}¶t(*.Statements.*)¶n"; 		¶echo -n "{T}ELSE¶n{T}¶t(*.Statements.*)¶n{T}END(*IF*);";				¶Find \¶(¶*.Expression.¶*¶)\ "{Active}"'AddMenu M2 '¥D FOR/¶' 'cut ¤ "{Active}";   ¶Find ¤:\¶n\Æ "{Active}"; Set T "`Cat "{Active}".¤`";Cut ¤ "{Active}";		¶echo -n "{T}FOR (*.Variable.*) := (*.Expression.*) TO (*.Expression.*) DO¶n";	¶echo -n "{T}¶t(*.Statements.*)¶n{T}END(*FOR*);";							¶Find \¶(¶*.Variable.¶*¶)\ "{Active}"'AddMenu M2 '¥W WHILE/·' 'cut ¤ "{Active}"; ¶Find ¤:\¶n\Æ "{Active}"; Set T "`Cat "{Active}".¤`";Cut ¤ "{Active}";	¶echo -n "{T}WHILE (*.Expression.*) DO¶n{T}¶t(*.Statements.*)¶n{T}END(*WHILE*);";	¶Find \¶(¶*.Expression.¶*¶)\ "{Active}"'AddMenu M2 '¥L LOOP/Â' 'cut ¤ "{Active}";  ¶Find ¤:\¶n\Æ "{Active}"; Set T "`Cat "{Active}".¤`";Cut ¤ "{Active}";	¶echo -n "{T}LOOP¶n{T}¶t(*.Statements.*)¶n{T}END(*LOOP*);"; ¶Find \¶(¶*.Statements.¶*¶)\ "{Active}"'AddMenu M2 '¥K CASE/Æ' 'cut ¤ "{Active}";  ¶Find ¤:\¶n\Æ "{Active}"; Set T "`Cat "{Active}".¤`";Cut ¤ "{Active}";	¶echo "{T}CASE (*.Expression.*) OF¶n{T}  (*.Constants.*):¶n{T}¶t(*.Statements.*)"; ¶echo "{T}| (*.Constants.*):¶n{T}¶t(*.Statements.*)¶n{T}ELSE";					¶echo -n "{T}¶t(*.Statements.*)¶n{T}END(*CASE*);";						¶Find \¶(¶*.Expression.¶*¶)\ "{Active}"'AddMenu M2 '¥G GUARD/©' 'cut ¤ "{Active}";  ¶Find ¤:\¶n\Æ "{Active}"; Set T "`Cat "{Active}".¤`";Cut ¤ "{Active}";	¶echo "{T}GUARD (*.Expression.*) AS¶n{T}  (*.Object.*):(*.Class.*) DO¶n{T}¶t(*.Statements.*)"; ¶echo "{T}| (*.Object.*):(*.Class.*) DO¶n{T}¶t(*.Statements.*)¶n{T}ELSE";					¶echo -n "{T}¶t(*.Statements.*)¶n{T}END(*GUARD*);";						¶Find \¶(¶*.Expression.¶*¶)\ "{Active}"'AddMenu M2 '¥R REPEAT/¨' 'cut ¤ "{Active}";  ¶Find ¤:\¶n\Æ "{Active}"; Set T "`Cat "{Active}".¤`";Cut ¤ "{Active}";	¶echo -n "{T}REPEAT¶n{T}¶t(*.Statements.*)¶n{T}UNTIL (*.Expression.*);"; ¶Find \¶(¶*.Statements.¶*¶)\ "{Active}"'AddMenu M2 '¥T WITH/ ' 'cut ¤ "{Active}";  ¶Find ¤:\¶n\Æ "{Active}"; Set T "`Cat "{Active}".¤`";Cut ¤ "{Active}";	¶echo -n "{T}WITH (*.Expression.*) DO¶n{T}¶t(*.Statements.*)¶n{T}END(*WITH*);"; 	¶Find \¶(¶*.Expression.¶*¶)\ "{Active}"'AddMenu M2 '¥P PROCEDURE/¹' '(Set N "`request "Procedure Name"¶?`")³dev:null; ¶cut ¤ "{Active}"; Find ¤:\¶n\Æ "{Active}"; Set T "`Cat "{Active}".¤`";	¶echo -n "{T}PROCEDURE {N} (¶*.Parameters.¶*);¶n{T}(¶*.Declarations.¶*)";	¶echo  "¶n{T}BEGIN¶n{T}¶t(¶*.Statements.¶*)¶n{T}END {N};";	¶Find \¶(¶*.Parameters.¶*¶)\ "{Active}" 'AddMenu M2 '¥E RECORD/ª' '(Set N "`request "Type Name"¶?`")³dev:null; cut ¤ "{Active}"; ¶Find ¤:\¶n\Æ "{Active}"; Set T "`Cat "{Active}".¤`";Cut ¤ "{Active}";	¶echo -n "{T}{N} = RECORD¶n{T}¶t(¶*.Fields.¶*)¶n{T}END(¶*{N}¶*);";	¶Find \¶(¶*.Fields.¶*¶)\ "{Active}" 'AddMenu M2 '¥M Comment/µ' 'set nLines `count -l "{Active}".¤`; ¶cut ¤ "{Active}";			¶echo "(*¶n *)"; 			¶find \¥\ "{Active}";		¶paste ¤ "{Active}"; 		¶find \¥\ "{Active}";		¶find Á{nLines} "{Active}";	¶Replace -c {nLines} /¥/	" *¶t" "{Active}"	'AddMenu M2 '¥U Uncomment/¬' '		¶Cut \¥¶(¶*\:/¶n/ "{Active}";			¶Find ¤:/¥ ¶*¶)°/Á1 "{Active}";			¶set nLines `count -l "{Active}".¤`;		¶Find Æ¤ "{Active}";						¶Replace -c {nLines} /¥ ¶*¶t(Å)¨1/ "¨1" "{Active}";	¶Replace /¥ ¶*¶)¶n/ "" "{Active}"	'AddMenu M2 '(-' ''AddMenu M2 '¥8 Next {*..*}/{' 'find (Æ¤)!1 "{Active}"; find /¶(¶*.[Â)]+.¶*¶)/ "{Active}"'AddMenu M2 '¥9 Prev {*..*}/}' 'find (Æ¤)Á1 "{Active}"; find \¶(¶*.[Â)]+.¶*¶)\ "{Active}"'AddMenu M2 '¥0 Next END/­' 'find /END/ "{Active}"; find /°/ "{Active}"'AddMenu M2 '(-' ''Addmenu	M2 'Mark PROCEDUREs'	'MarkM2'AddMenu M2 'Search Toolbox<I' 'Search -i /`request Name¶?`/ ¶			"{M2UniversalDefs}"Å.DEF >> "{Worksheet}" ³ dev:null'#AddMenu M2 'Search MacApp<I' 'Search -i /`request Name¶?`/ ¶#			"{MAM2Interfaces}"Å.DEF >> "{Worksheet}" ³ dev:null'AddMenu M2 'Search Library<I' 'Search -i /`request Name¶?`/ ¶			"{M2LibDefs}"Å.DEF >> "{Worksheet}" ³ dev:null'#AddMenu M2 'Search old Library<I' 'Search -i /`request Name¶?`/ ¶#			"{M2OldLibraryDefs}"Å.DEF >> "{Worksheet}" ³ dev:null'AddMenu M2 '(-' ''#AddMenu M2 'Universal Defs:' 'Directory "{M2UniversalDefs}"'#AddMenu M2 'Library Defs:' 'Directory "{M2LibDefs}"'#AddMenu M2 'M2Interfaces:OldLibrary:' 'Directory "{M2OldLibraryDefs}"'#AddMenu M2 'M2Interfaces:MacApp:' 'Directory "{MAM2Interfaces}"'#AddMenu M2 '(-' ''Addmenu	M2 'Neue Library'	'	¶	Set M2Libraries  M2:Library:; Export M2Libraries; ¶	Set M2Interfaces  M2:Library:; Export M2Interfaces; ¶	Set M2PPCSyms "{M2Interfaces}SYMsPPC:"; Export M2PPCSyms; ¶	Set M268kSyms "{M2Interfaces}SYMs:"; Export M268kSyms; 'Addmenu	M2 'Alte Library'	'	¶	Set int "{MPW}:Interfaces&Libraries:"; ¶	Set M2Libraries  "{int}Libraries:M2Libraries:"; Export M2Libraries; ¶	Set M2Interfaces  "{int}Interfaces:M2Interfaces:"; Export M2Interfaces; ¶	Set M2PPCSyms "{M2Interfaces}M2PPCSyms:"; Export M2PPCSyms; ¶	Set M268kSyms "{M2Interfaces}M268kSyms:"; Export M268kSyms; ¶	Unset int '